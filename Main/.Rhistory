c1<-orig_vars[grepl('^totalvalue_enfu_fuel_consumed_.*_fuel_electricity$', orig_vars)] #Skip electricity costs because they are duplicative of other costs
c2<-orig_vars[grepl('totalvalue.*furnace_gas', orig_vars)] #Skip furnace gas because it is crazy buggy and extraneous
exclude_list<-c(c1,
c2,
'totalvalue_enfu_fuel_consumed_entc_fuel_crude' #Skip crude because it is duplicative
)
rows_to_keep<-!grepl(paste(exclude_list, collapse="|"), data$variable)
data_cleaned<-data[rows_to_keep,]
new_vars<-unique(data_cleaned$variable)
data<-data_cleaned
#-------------CALCULATE COSTS AND BENEFITS----------
cb_main_definitions<-read.csv(cb_main_definitions_filename)
cb_strategy_specific_definitions<-read.csv(cb_strategy_specific_definitions_filename)
start_time <- Sys.time()
results<-calculate_costs_and_benefits(data,
#cb_main_definitions[cb_main_definitions$strategy=='TRNS: Electrify light duty road transport',]
,
cb_strategy_specific_definitions)
debugSource("~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/cb_utilities.R", echo=TRUE)
results<-calculate_costs_and_benefits(data,
#cb_main_definitions[cb_main_definitions$strategy=='TRNS: Electrify light duty road transport',]
,
cb_strategy_specific_definitions)
strategy_code_base
strategy_code_tx
output_mults
diff_var
output_mults
debugSource("~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/cb_utilities.R", echo=TRUE)
results<-calculate_costs_and_benefits(data,
#cb_main_definitions[cb_main_definitions$strategy=='TRNS: Electrify light duty road transport',]
,
cb_strategy_specific_definitions)
strategy_specific_definitions$difference_variable[s]
output_vars
data_merged$difference
output_mults
data_merged$time_period_for_multiplier_change
change_in_multiplier
output_var
output_vars
output_mults
results<-calculate_costs_and_benefits(data,
#cb_main_definitions[cb_main_definitions$strategy=='TRNS: Electrify light duty road transport',]
,
cb_strategy_specific_definitions)
output_vars
v
output_mults
results<-calculate_costs_and_benefits(data,
#cb_main_definitions[cb_main_definitions$strategy=='TRNS: Electrify light duty road transport',]
,
cb_strategy_specific_definitions)
strategy_specific_definitions$difference_variable
strategy_specific_definitions$multiplier
v
output_mults
help(as.numeric)
debugSource("~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/cb_utilities.R", echo=TRUE)
results<-calculate_costs_and_benefits(data,
#cb_main_definitions[cb_main_definitions$strategy=='TRNS: Electrify light duty road transport',]
,
cb_strategy_specific_definitions)
n
Q
source("~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/cb_utilities.R", echo=TRUE)
results<-calculate_costs_and_benefits(data,
#cb_main_definitions[cb_main_definitions$strategy=='TRNS: Electrify light duty road transport',]
,
cb_strategy_specific_definitions)
source("~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/cb_utilities.R", echo=TRUE)
results<-calculate_costs_and_benefits(data,
#cb_main_definitions[cb_main_definitions$strategy=='TRNS: Electrify light duty road transport',]
,
cb_strategy_specific_definitions)
#-------------WRITE THE RESULTS---------------------
write.csv(results, cb_output_filename)
#-------------WRITE THE RESULTS---------------------
write.csv(results, cb_output_filename)
help("write.csv")
#-------------WRITE THE RESULTS---------------------
write.csv(results, file=cb_output_filename)
cb_output_filename<-'~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/CB_summary_energy_results.csv'
cb_output_filename<-'~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/CB_summary_energy_results.csv'
#-------------WRITE THE RESULTS---------------------
write.csv(results, file=cb_output_filename)
setwd("~/Desktop/LAC Energy Tableaus")
library(reshape)
library("readxl")
library(dplyr)
source("CBUtil_energy.R")
source("IMF_externality_multipliers.R")
source("Country Specific Multipliers.R")
source("SSP Utilities.R")
#INPUT OUTPUT FILE NAMES
filename<-'summary_energy_results.csv'
output.file<-read.csv(filename)
data<-output.file
run_attributes<-ssp_merge_run_attributes()
merged_data<-merge(data, run_attributes[,1:2], by=c('primary_id'), x.all=TRUE)
data<-merged_data
outfilename<-paste0("CB_", filename)
outfilename_defs<-paste0("CB_definitions_", filename)
definition_file<-'energy_cb_definitions_5_9.csv'
#Use these for cost blender
#definition_file<-'Cost Blender Testing/CB_definitions_cost_blender_SCOE_test.csv'
#outfilename<-paste0("Cost Blender Testing/cost_blender_", data_filename)
#outfilename_defs<-paste0("Cost Blender Testing/cost_blender_definitions_", data_filename)
#trim to just the necessary columns
cb_results<-calculate_costs_and_benefits(data, definition_file, outfilename, outfilename_defs)
#This script will calculate all the costs and benefits defined in
#a cost_benefit_definitions_main.csv file.
#To run this scirpt, please update thew workding directory and the paths in cb_config.R and update any filenames here
#------------SET WORKING DIRECTORY----------
setwd('~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/')
#-------------PATHS to KEY FILES-----------
data_filename<-'~/Desktop/LAC Energy Tableaus/summary_energy_results.csv' #path to model output runs
primary_filename<-'~/Desktop/LAC Energy Tableaus/ATTRIBUTE_PRIMARY.csv' #path to model output primary filename
strategy_filename<-'~/Desktop/LAC Energy Tableaus/ATTRIBUTE_STRATEGY.csv' #path to model output strategy filename
cb_main_definitions_filename<-'~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/cost_benefit_definitions_main.csv' #path to the main cost benefit definitions file
cb_strategy_specific_definitions_filename<-'~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/cost_benefit_definitions_strategy_specific.csv' #path to strategy-specific file
cb_output_filename<-'~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/cost_benefit_results.csv'
#-------------SOURCE LIBRARIES AND CODE-----
source('cb_config.R')
source('cb_utilities.R')
source('cb_strategy_specific_functions.R')
source('general_ssp_utilities.R')
#-------------PREPARE THE DATA--------------
#Read data
output.file<-read.csv(data_filename)
data<-output.file
#Merge model output with strategy attributes (mainly the strategy_code)
run_attributes<-ssp_merge_run_attributes(primary_filename, strategy_filename)
merged_data<-merge(data, run_attributes[,c('primary_id', 'strategy_code')], by=c('primary_id'), x.all=TRUE)
data<-merged_data
#Clean the data of rows with variables that are buggy or extraneous
orig_vars<-unique(data$variable)
c1<-orig_vars[grepl('^totalvalue_enfu_fuel_consumed_.*_fuel_electricity$', orig_vars)] #Skip electricity costs because they are duplicative of other costs
c2<-orig_vars[grepl('totalvalue.*furnace_gas', orig_vars)] #Skip furnace gas because it is crazy buggy and extraneous
exclude_list<-c(c1,
c2,
'totalvalue_enfu_fuel_consumed_entc_fuel_crude' #Skip crude because it is duplicative
)
rows_to_keep<-!grepl(paste(exclude_list, collapse="|"), data$variable)
data_cleaned<-data[rows_to_keep,]
new_vars<-unique(data_cleaned$variable)
data<-data_cleaned
#-------------CALCULATE COSTS AND BENEFITS----------
#read the definition
#run the code
#NIDHI: note to self -- how will we keep track of the definitions that are in cost factor files?
#want to add the following information to each row? output_variable_name	output_display_name	natural.multiplier.units	display_notes	internal_notes
#NIDHI: figure out how to commit
#
cb_main_definitions<-read.csv(cb_main_definitions_filename)
cb_strategy_specific_definitions<-read.csv(cb_strategy_specific_definitions_filename)
start_time <- Sys.time()
results<-calculate_costs_and_benefits(data,
#cb_main_definitions[cb_main_definitions$strategy=='TRNS: Electrify light duty road transport',]
,
cb_strategy_specific_definitions)
end_time <- Sys.time()
runtime<-(end_time - start_time)
#Test a single cost factor file
#test_cost_factors<-read.csv('~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/cost_factors/ghg_effects_factors.csv')
#list_of_vars<-unique(data$variable)
#test<-calculate_costs_and_benefits_from_cost_factors(data, cb_definitions[cb_definitions$strategy_code=='TRNS:MODE_SHIFT_FREIGHT',], test_cost_factors, list_of_vars)
#-------------WRITE THE RESULTS---------------------
write.csv(results, file=cb_output_filename)
results<-calculate_costs_and_benefits(data,
cb_main_definitions[cb_main_definitions$strategy=='TRNS: Electrify light duty road transport',]
,
cb_strategy_specific_definitions)
#-------------WRITE THE RESULTS---------------------
write.csv(results, file=cb_output_filename)
a<-read.csv("../cost_factors/entc_air_pollution_cost_factors.csv")
a<-read.csv("../cost_factors/entc_air_pollution_cost_factors.csv")
cb_main_definitions<-read.csv(cb_main_definitions_filename)
cb_strategy_specific_definitions<-read.csv(cb_strategy_specific_definitions_filename)
start_time <- Sys.time()
results<-calculate_costs_and_benefits(data,
cb_main_definitions[cb_main_definitions$strategy=='TRNS: Electrify light duty road transport',]
,
cb_strategy_specific_definitions)
end_time <- Sys.time()
runtime<-(end_time - start_time)
#Test a single cost factor file
#test_cost_factors<-read.csv('~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/cost_factors/ghg_effects_factors.csv')
#list_of_vars<-unique(data$variable)
#test<-calculate_costs_and_benefits_from_cost_factors(data, cb_definitions[cb_definitions$strategy_code=='TRNS:MODE_SHIFT_FREIGHT',], test_cost_factors, list_of_vars)
#-------------WRITE THE RESULTS---------------------
write.csv(results, file=cb_output_filename)
read.csv('~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/cost_factors/trns_congestion_cost_factors.csv')
source("~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/cb_utilities.R", echo=TRUE)
results<-calculate_costs_and_benefits(data,
cb_main_definitions[cb_main_definitions$strategy=='TRNS: Electrify light duty road transport',]
,
cb_strategy_specific_definitions)
do.call(paste, list(as.name("A"), as.name("B")), quote = TRUE)
do.call("paste", list(as.name("A"), as.name("B")), quote = TRUE)
source("~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/cb_utilities.R", echo=TRUE)
results<-calculate_costs_and_benefits(data,
cb_main_definitions[cb_main_definitions$strategy=='TRNS: Electrify light duty road transport',]
,
cb_strategy_specific_definitions)
source("~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/cb_utilities.R", echo=TRUE)
results<-calculate_costs_and_benefits(data,
cb_main_definitions[cb_main_definitions$strategy=='TRNS: Electrify light duty road transport',]
,
cb_strategy_specific_definitions)
source("~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/cb_utilities.R", echo=TRUE)
results<-calculate_costs_and_benefits(data,
cb_main_definitions[cb_main_definitions$strategy=='TRNS: Electrify light duty road transport',]
,
cb_strategy_specific_definitions)
source("~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/cb_utilities.R", echo=TRUE)
results<-calculate_costs_and_benefits(data,
#cb_main_definitions[cb_main_definitions$strategy=='TRNS: Electrify light duty road transport',]
,
cb_strategy_specific_definitions)
debugSource("~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/cb_utilities.R", echo=TRUE)
results<-calculate_costs_and_benefits(data,
#cb_main_definitions[cb_main_definitions$strategy=='TRNS: Electrify light duty road transport',]
,
cb_strategy_specific_definitions)
cb_function
results<-calculate_costs_and_benefits(data,
#cb_main_definitions[cb_main_definitions$strategy=='TRNS: Electrify light duty road transport',]
,
cb_strategy_specific_definitions)
strategy_specific_definitions
colnames(strategy_specific_definitions
)
cb_main_definitions<-read.csv(cb_main_definitions_filename)
cb_strategy_specific_definitions<-read.csv(cb_strategy_specific_definitions_filename)
start_time <- Sys.time()
results<-calculate_costs_and_benefits(data,
#cb_main_definitions[cb_main_definitions$strategy=='TRNS: Electrify light duty road transport',]
,
cb_strategy_specific_definitions)
cb_main_definitions<-read.csv(cb_main_definitions_filename)
cb_strategy_specific_definitions<-read.csv(cb_strategy_specific_definitions_filename)
start_time <- Sys.time()
results<-calculate_costs_and_benefits(data,
#cb_main_definitions[cb_main_definitions$strategy=='TRNS: Electrify light duty road transport',]
,
cb_strategy_specific_definitions)
strategy_specific_definitions$cb_function
cb_function
debugSource("~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/cb_utilities.R", echo=TRUE)
source("~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/cb_utilities.R", echo=TRUE)
debugSource("~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/cb_utilities.R", echo=TRUE)
source("~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/cb_utilities.R", echo=TRUE)
results<-calculate_costs_and_benefits(data,
#cb_main_definitions[cb_main_definitions$strategy=='TRNS: Electrify light duty road transport',]
,
cb_strategy_specific_definitions)
source("~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/cb_utilities.R", echo=TRUE)
results<-calculate_costs_and_benefits(data,
#cb_main_definitions[cb_main_definitions$strategy=='TRNS: Electrify light duty road transport',]
,
cb_strategy_specific_definitions[cb_strategy_specific_definitions$strategy=='TRNS: Fuel switch maritime',])
View(results)
source("~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/cb_calculate_costs_and_benefits_script.R", echo=TRUE)
results<-calculate_costs_and_benefits(data,
#cb_main_definitions[cb_main_definitions$strategy=='TRNS: Electrify light duty road transport',]
,
cb_strategy_specific_definitions[cb_strategy_specific_definitions$strategy=='TRNS: Fuel switch maritime',])
results<-calculate_costs_and_benefits(data,
#cb_main_definitions[cb_main_definitions$strategy=='TRNS: Electrify light duty road transport',]
,
cb_strategy_specific_definitions[cb_strategy_specific_definitions$strategy=='TRNS: Fuel switch maritime',])
View(results)
results<-calculate_costs_and_benefits(data,
#cb_main_definitions[cb_main_definitions$strategy=='TRNS: Electrify light duty road transport',]
,
cb_strategy_specific_definitions[cb_strategy_specific_definitions$strategy=='TRNS: Fuel switch maritime',])
results<-calculate_costs_and_benefits(data,
#cb_main_definitions[cb_main_definitions$strategy=='TRNS: Electrify light duty road transport',]
,
cb_strategy_specific_definitions[cb_strategy_specific_definitions$strategy=='TRNS: Fuel switch maritime',])
cb_function
#-------------CALCULATE COSTS AND BENEFITS----------
#read the definition
#run the code
#NIDHI: note to self -- how will we keep track of the definitions that are in cost factor files?
#want to add the following information to each row? output_variable_name	output_display_name	natural.multiplier.units	display_notes	internal_notes
#NIDHI: figure out how to commit
#
cb_main_definitions<-read.csv(cb_main_definitions_filename)
cb_strategy_specific_definitions<-read.csv(cb_strategy_specific_definitions_filename)
start_time <- Sys.time()
results<-calculate_costs_and_benefits(data,
#cb_main_definitions[cb_main_definitions$strategy=='TRNS: Electrify light duty road transport',]
,
cb_strategy_specific_definitions[cb_strategy_specific_definitions$strategy=='TRNS: Fuel switch maritime',])
#-------------CALCULATE COSTS AND BENEFITS----------
#read the definition
#run the code
#NIDHI: note to self -- how will we keep track of the definitions that are in cost factor files?
#want to add the following information to each row? output_variable_name	output_display_name	natural.multiplier.units	display_notes	internal_notes
#NIDHI: figure out how to commit
#
cb_main_definitions<-read.csv(cb_main_definitions_filename)
cb_strategy_specific_definitions<-read.csv(cb_strategy_specific_definitions_filename)
start_time <- Sys.time()
results<-calculate_costs_and_benefits(data,
#cb_main_definitions[cb_main_definitions$strategy=='TRNS: Electrify light duty road transport',]
,
cb_strategy_specific_definitions[cb_strategy_specific_definitions$strategy=='TRNS: Fuel switch maritime',])
View(run_attributes)
View(results)
1204606 * 0.003
1204606 * 0.0003
trillion<-10^12
maritime_mtkm<-500000*10^9
trillion/maritime_mtkm
trillion*0.45/maritime_mtkm
trillion*0.55/maritime_mtkm
library(SSPCostConverter)
ssp_cost_converter(0.0011, "USA", 2020, "LAC_AVERAGE", 2019)
ssp_cost_converter(0.0011, "USA", 2019, "LAC_AVERAGE", 2019)
#------------Fuel Switch Maritime
global_cost<-10^12 #trillion $
global_mtkm<-500000*10^9 #500,000 billion
frac_non_h2<-0.55 #fraction that is for ammonia production
US_maritime_cost_per_mtkm<-global_cost*frac_non_h2/global_mtkm
lac_maritime_cost_per_mktm<-ssp_cost_converter(US_maritime_cost_per_mtkm, 'USA', 2020, 'LAC_AVERAGE', 2019)
ssp_merge_run_attributes()
primary_filename<-'~/Desktop/LAC Energy Tableaus/ATTRIBUTE_PRIMARY.csv' #path to model output primary filename
strategy_filename<-'~/Desktop/LAC Energy Tableaus/ATTRIBUTE_STRATEGY.csv' #path to model output strategy filename
#Merge model output with strategy attributes (mainly the strategy_code)
run_attributes<-ssp_merge_run_attributes(primary_filename, strategy_filename)
write.csv("run_attributes.csv", run_attributes)
View(run_attributes)
write.csv('run_attributes.csv', run_attributes)
help(write.csv)
write.csv(run_attributes, 'run_attributes.csv'
)
lac_iso3_codes<-ssp_LAC_iso3()
lac_iso3_codes
t(lac_iso3_codes)
#get the loss file
path_to_loss_reduction_costs<-paste0(ssp_costs_benefits_git_path, 'strategy_specific_cb_files/ENTC_REDUCE_LOSSES_cost_file.xlsx')
cb_transmission_loss_costs<-read_xlsx(path_to_loss_reduction_costs, sheet = "Annual Loss Reduction Cost")
#map ISO3 to the reigons
path_to_country_codes<-paste0(sisepuede_data_git_path, 'Energy/nemomod_entc_residual_capacity_pp_gas_gw/raw_data/iso3_all_countries.csv')
country_codes<-read.csv(path_to_country_codes)
cb_transmission_loss_costs(cb_transmission_loss_costs, country_codes, by=c('ISO3'))
cb_transmission_loss_costs<-merge(cb_transmission_loss_costs, country_codes, by=c('ISO3'))
View(cb_transmission_loss_costs)
View(cb_transmission_loss_costs)
#assign fixed losses to each country from 2025 to 2050
data_strategy<-subset(data, strategy_code==definition$test_id & variable==definition$difference_variable)
colnames(cb_transmission_loss_costs)
#get the loss file
path_to_loss_reduction_costs<-paste0(ssp_costs_benefits_git_path, 'strategy_specific_cb_files/ENTC_REDUCE_LOSSES_cost_file.xlsx')
cb_transmission_loss_costs<-read_xlsx(path_to_loss_reduction_costs, sheet = "Annual Loss Reduction Cost")
#map ISO3 to the reigons
path_to_country_codes<-paste0(sisepuede_data_git_path, 'Energy/nemomod_entc_residual_capacity_pp_gas_gw/raw_data/iso3_all_countries.csv')
country_codes<-read.csv(path_to_country_codes)
cb_transmission_loss_costs<-merge(cb_transmission_loss_costs, country_codes, by=c('ISO3'))
colnames(cb_transmission_loss_costs)[colnames(cb_transmission_loss_costs)=='REGION']<-'region'
#assign fixed losses to each country from 2025 to 2050
data_strategy<-subset(data, strategy_code==definition$test_id & variable==definition$difference_variable)
data_output<-merge(data_strategy, cb_transmission_loss_costs, by=c('region'))
colnames(cb_transmission_loss_costs)[colnames(cb_transmission_loss_costs)=='REGION']<-'region'
colnames(cb_transmission_loss_costs)
#Test the entc transmission loss
definition<-cb_strategy_specific_definitions[cb_strategy_specific_definitions$strategy=='ENTC:REDUCE_LOSSES',]
#get the loss file
path_to_loss_reduction_costs<-paste0(ssp_costs_benefits_git_path, 'strategy_specific_cb_files/ENTC_REDUCE_LOSSES_cost_file.xlsx')
cb_transmission_loss_costs<-read_xlsx(path_to_loss_reduction_costs, sheet = "Annual Loss Reduction Cost")
#map ISO3 to the reigons
path_to_country_codes<-paste0(sisepuede_data_git_path, 'Energy/nemomod_entc_residual_capacity_pp_gas_gw/raw_data/iso3_all_countries.csv')
country_codes<-read.csv(path_to_country_codes)
cb_transmission_loss_costs<-merge(cb_transmission_loss_costs, country_codes, by=c('ISO3'))
colnames(cb_transmission_loss_costs)[colnames(cb_transmission_loss_costs)=='REGION']<-'region'
#assign fixed losses to each country from 2025 to 2050
data_strategy<-subset(data, strategy_code==definition$test_id & variable==definition$difference_variable)
data_output<-merge(data_strategy, cb_transmission_loss_costs, by=c('region'))
data_output$variable<-definition$output_variable_name
data_output$value<-cb_transmission_loss_costs$annual_investment_USD
data_output$value<-data_output$annual_investment_USD
data_output$value<-data_output$annual_investment_USD
data_output$difference_variable<-'N/A (constant annual cost)'
data_output$difference_variable<-'N/A (constant annual cost)'
#assign fixed losses to each country from 2025 to 2050
data_strategy<-subset(data, strategy_code==definition$test_id & variable==definition$difference_variable)
data_output<-merge(data_strategy, cb_transmission_loss_costs, by=c('region'))
View(data_output)
#assign fixed losses to each country from 2025 to 2050
data_strategy<-subset(data, strategy_code==definition$test_id & variable==definition$difference_variable)
View(data_strategy)
unique(data$strategy_code)
definition
#Test the entc transmission loss
definition<-cb_strategy_specific_definitions[cb_strategy_specific_definitions$strategy=='ENTC:REDUCE_LOSSES',]
#Test the entc transmission loss
definition<-cb_strategy_specific_definitions[cb_strategy_specific_definitions$strategy_code=='ENTC:REDUCE_LOSSES',]
View(definition)
definition
unique(data$strategy_code)
cb_strategy_specific_definitions<-read.csv(cb_strategy_specific_definitions_filename)
#Test the entc transmission loss
definition<-cb_strategy_specific_definitions[cb_strategy_specific_definitions$strategy_code=='ENTC:REDUCE_LOSSES',]
#Test the entc transmission loss
definition<-cb_strategy_specific_definitions[cb_strategy_specific_definitions$strategy_code=='ENTC:REDUCE_LOSSES',]
unique(data$strategy_code)
unique(cb_strategy_specific_definitions$strategy_code)
cb_strategy_specific_definitions<-read.csv(cb_strategy_specific_definitions_filename)
unique(cb_strategy_specific_definitions$strategy_code)
#Test the entc transmission loss
definition<-cb_strategy_specific_definitions[cb_strategy_specific_definitions$strategy_code=='ENTC:REDUCE_LOSSES',]
#Get the LAC gdp data and format it for time_period, region, and gdp columns
path_to_gdp_data<-paste0(sisepuede_data_git_path, 'SocioEconomic/gdp_mmm_usd/input_to_sisepuede/projected/gdp_mmm_usd.csv')
gdp_data<-read.csv(path_to_gdp_data)
lac_iso3_codes<-ssp_LAC_iso3()
gdp_data<-gdp_data[gdp_data$iso_code3 %in% lac_iso3_codes, ]
#time period
gdp_data$time_period<-gdp_data$Year-2015
#country codes
colnames(gdp_data)[1]<-'ISO3'
path_to_country_codes<-paste0(sisepuede_data_git_path, 'Energy/nemomod_entc_residual_capacity_pp_gas_gw/raw_data/iso3_all_countries.csv')
country_codes<-read.csv(path_to_country_codes)
gdp_data<-merge(gdp_data, country_codes, by=c('ISO3'))
colnames(gdp_data)[colnames(gdp_data)=='REGION']<-'region'
gdp_data<-gdp_data[,c('region', 'time_period', 'gdp_mmm_usd')]
#Create the demand reduction data frame
time_period<-seq(from=0, to=35, by=1)
demand_reduction<-c(rep(0,10), seq(from = 0, to = 0.25, by = (0.25)/25))
demand_reduction_transformation<-data.frame(time_period, demand_reduction)
#get the loss file
path_to_loss_reduction_costs<-paste0(ssp_costs_benefits_git_path, 'strategy_specific_cb_files/ENTC_REDUCE_LOSSES_cost_file.xlsx')
cb_transmission_loss_costs<-read_xlsx(path_to_loss_reduction_costs, sheet = "Annual Loss Reduction Cost")
#map ISO3 to the reigons
path_to_country_codes<-paste0(sisepuede_data_git_path, 'Energy/nemomod_entc_residual_capacity_pp_gas_gw/raw_data/iso3_all_countries.csv')
country_codes<-read.csv(path_to_country_codes)
cb_transmission_loss_costs<-merge(cb_transmission_loss_costs, country_codes, by=c('ISO3'))
colnames(cb_transmission_loss_costs)[colnames(cb_transmission_loss_costs)=='REGION']<-'region'
#assign fixed losses to each country from 2025 to 2050
data_strategy<-subset(data, strategy_code==definition$test_id & variable==definition$difference_variable)
data_output<-merge(data_strategy, cb_transmission_loss_costs, by=c('region'))
data_output$variable<-definition$output_variable_name
#assign fixed losses to each country from 2025 to 2050
data_strategy<-subset(data, strategy_code==definition$test_id & variable==definition$difference_variable)
definition$test_id
definition$difference_variable
#-------------CALCULATE COSTS AND BENEFITS----------
#read the definition
#run the code
#NIDHI: note to self -- how will we keep track of the definitions that are in cost factor files?
#want to add the following information to each row? output_variable_name	output_display_name	natural.multiplier.units	display_notes	internal_notes
#NIDHI: figure out how to commit
#
cb_main_definitions<-read.csv(cb_main_definitions_filename)
cb_strategy_specific_definitions<-read.csv(cb_strategy_specific_definitions_filename)
#Test the entc transmission loss
definition<-cb_strategy_specific_definitions[cb_strategy_specific_definitions$strategy_code=='ENTC:REDUCE_LOSSES',]
#assign fixed losses to each country from 2025 to 2050
data_strategy<-subset(data, strategy_code==definition$test_id & variable==definition$difference_variable)
data_output<-merge(data_strategy, cb_transmission_loss_costs, by=c('region'))
data_output$variable<-definition$output_variable_name
data_output$value<-data_output$annual_investment_USD
data_output$difference_variable<-'N/A (constant annual cost)'
data_output$difference_value<-data_output$annual_investment_USD
View(data_output)
#get the loss file
path_to_loss_reduction_costs<-paste0(ssp_costs_benefits_git_path, 'strategy_specific_cb_files/ENTC_REDUCE_LOSSES_cost_file.xlsx')
cb_transmission_loss_costs<-read_xlsx(path_to_loss_reduction_costs, sheet = "Annual Loss Reduction Cost")
#map ISO3 to the reigons
path_to_country_codes<-paste0(sisepuede_data_git_path, 'Energy/nemomod_entc_residual_capacity_pp_gas_gw/raw_data/iso3_all_countries.csv')
country_codes<-read.csv(path_to_country_codes)
cb_transmission_loss_costs<-merge(cb_transmission_loss_costs, country_codes, by=c('ISO3'))
colnames(cb_transmission_loss_costs)[colnames(cb_transmission_loss_costs)=='REGION']<-'region'
#assign fixed losses to each country from 2025 to 2050
data_strategy<-subset(data, strategy_code==definition$test_id & variable==definition$difference_variable)
data_output<-merge(data_strategy, cb_transmission_loss_costs, by=c('region'))
data_output$variable<-definition$output_variable_name
data_output$value<-data_output$annual_investment_USD
cb_strategy_specific_definitions<-read.csv(cb_strategy_specific_definitions_filename)
#Test the entc transmission loss
definition<-cb_strategy_specific_definitions[cb_strategy_specific_definitions$strategy_code=='ENTC:REDUCE_LOSSES',]
cb_transmission_loss_costs<-read_xlsx(path_to_loss_reduction_costs, sheet = "Annual Loss Reduction Cost")
#map ISO3 to the reigons
path_to_country_codes<-paste0(sisepuede_data_git_path, 'Energy/nemomod_entc_residual_capacity_pp_gas_gw/raw_data/iso3_all_countries.csv')
country_codes<-read.csv(path_to_country_codes)
cb_transmission_loss_costs<-merge(cb_transmission_loss_costs, country_codes, by=c('ISO3'))
colnames(cb_transmission_loss_costs)[colnames(cb_transmission_loss_costs)=='REGION']<-'region'
#assign fixed losses to each country from 2025 to 2050
data_strategy<-subset(data, strategy_code==definition$test_id & variable==definition$difference_variable)
data_output<-merge(data_strategy, cb_transmission_loss_costs, by=c('region'))
data_output$variable<-definition$output_variable_name
data_output$value<-data_output$annual_investment_USD
data_output$difference_variable<-'N/A (constant annual cost)'
data_output$difference_value<-data_output$annual_investment_USD
colnames(data_output)
data_output <- subset(data_output, select = -c(primary_id, ISO3, Country, annual_investment_USD, Code))
View(data_output)
data_output <- subset(data_output, select = -c(primary_id, ISO3, Country, annual_investment_USD, Code, Category.Name))
#assign fixed losses to each country from 2025 to 2050
data_strategy<-subset(data, strategy_code==definition$test_id & variable==definition$difference_variable)
data_output<-merge(data_strategy, cb_transmission_loss_costs, by=c('region'))
data_output$variable<-definition$output_variable_name
data_output$value<-data_output$annual_investment_USD
data_output$difference_variable<-'N/A (constant annual cost)'
data_output$difference_value<-data_output$annual_investment_USD
data_output <- subset(data_output, select = -c(primary_id, ISO3, Country, annual_investment_USD, Code, Category.Name))
source("~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/cb_calculate_costs_and_benefits_script.R", echo=TRUE)
source("~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/cb_strategy_specific_functions.R", echo=TRUE)
loss_cost<-cb_entc_reduce_losses(data, definition)
View(loss_cost)
